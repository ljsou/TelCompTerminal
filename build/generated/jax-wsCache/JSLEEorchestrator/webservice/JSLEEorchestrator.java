
package webservice;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "JSLEEorchestrator", targetNamespace = "http://webservice/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface JSLEEorchestrator {


    /**
     * 
     * @param serviceName
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteService", targetNamespace = "http://webservice/", className = "webservice.DeleteService")
    @ResponseWrapper(localName = "deleteServiceResponse", targetNamespace = "http://webservice/", className = "webservice.DeleteServiceResponse")
    @Action(input = "http://webservice/JSLEEorchestrator/deleteServiceRequest", output = "http://webservice/JSLEEorchestrator/deleteServiceResponse")
    public boolean deleteService(
        @WebParam(name = "serviceName", targetNamespace = "")
        String serviceName);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getDeployedServices", targetNamespace = "http://webservice/", className = "webservice.GetDeployedServices")
    @ResponseWrapper(localName = "getDeployedServicesResponse", targetNamespace = "http://webservice/", className = "webservice.GetDeployedServicesResponse")
    @Action(input = "http://webservice/JSLEEorchestrator/getDeployedServicesRequest", output = "http://webservice/JSLEEorchestrator/getDeployedServicesResponse")
    public List<String> getDeployedServices();

    /**
     * 
     * @param jsoNgraph
     * @param reconfiguration
     * @param serviceName
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "orchestrateService", targetNamespace = "http://webservice/", className = "webservice.OrchestrateService")
    @ResponseWrapper(localName = "orchestrateServiceResponse", targetNamespace = "http://webservice/", className = "webservice.OrchestrateServiceResponse")
    @Action(input = "http://webservice/JSLEEorchestrator/orchestrateServiceRequest", output = "http://webservice/JSLEEorchestrator/orchestrateServiceResponse")
    public String orchestrateService(
        @WebParam(name = "JSONgraph", targetNamespace = "")
        String jsoNgraph,
        @WebParam(name = "ServiceName", targetNamespace = "")
        String serviceName,
        @WebParam(name = "reconfiguration", targetNamespace = "")
        boolean reconfiguration);

    /**
     * 
     * @param parameter
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "testBD", targetNamespace = "http://webservice/", className = "webservice.TestBD")
    @Action(input = "http://webservice/JSLEEorchestrator/testBD")
    public void testBD(
        @WebParam(name = "parameter", targetNamespace = "")
        String parameter);

}
